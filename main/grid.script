local cell_state = require("main.cell_state")
local event_bus = require("main.event_bus_module")
local factory_component = "#cell_factory"
local GAME_STATE = require('main.game_state')
local GAME_SETTINGS = require('main.game_settings')
local animations_queue = require("main.modules.animation_queue_module")

go.property("width", 0)
go.property("height", 0)
go.property("pre_prepare_state_time", 0)

local function check_state(self, cell)
	local state = go.get(cell, "state")
	if state == _G.cell_state.RIGHT then
		self.count_is_right_cells = self.count_is_right_cells + 1
	end

	if state == _G.cell_state.FAIL then
		self.count_is_fail_cells = self.count_is_fail_cells + 1
	end

	if self.count_is_right_cells == self.cells_is_right_count then
		msg.post("bootstrap:/bootstrap", "pause_level")
		msg.post("bootstrap:/bootstrap", "update_level", {level = GAME_STATE.LEVEL + 1})
		animations_queue.animation_queue:add_animation(coroutine.create(function ()
			msg.post("/gui", "win_level_animation")
		end), 2)
		animations_queue.animation_queue:add_animation(coroutine.create(function ()
			msg.post("bootstrap:/bootstrap", "finish_level")
			animations_queue.animation_queue.on_animation_complete()
		end), 3)
	end

	if self.count_is_fail_cells > self.cells_is_fail_count then
		msg.post("bootstrap:/bootstrap", "pause_level")
		for _, cell in ipairs(self.cells) do
			animations_queue.animation_queue:add_animation(coroutine.create(function ()
				msg.post(cell, "set_not_clicked_right_cell")
			end), 1)
		end
		msg.post("bootstrap:/bootstrap", "update_level", {level = GAME_STATE.LEVEL})
		animations_queue.animation_queue:add_animation(coroutine.create(function ()
			msg.post("/gui", "lose_level_animation")
		end), 2)
		animations_queue.animation_queue:add_animation(coroutine.create(function ()
			msg.post("bootstrap:/bootstrap", "finish_level")
			animations_queue.animation_queue.on_animation_complete()
		end), 3)
	end
end

local function validate_is_right_cells_count(self)
	while self.cells_is_right_count == 0 do
		for _, cell in ipairs(self.cells) do
			local is_right_cell = go.get(msg.url(nil, cell, "cell"), "is_right_cell")
			if is_right_cell == false then
				if self.set_is_right_cell() == true then
					go.set(msg.url(nil, cell, "cell"), "is_right_cell", true)
					break
				end
			end
		end
	end

	local difference = GAME_SETTINGS:get_settings(GAME_STATE.LEVEL).max_count_right_cells - self.cells_is_right_count
	if difference <= 0 then
		local is_right_cells = {}
		for _, cell in ipairs(self.cells) do
			local is_right_cell = go.get(msg.url(nil, cell, "cell"), "is_right_cell")
			if is_right_cell == true then
				table.insert(is_right_cells, cell)
			end
		end

		for _ = 1, math.abs(difference) do
			local random_cell_idx = math.random(#is_right_cells)
			go.set(msg.url(nil, is_right_cells[random_cell_idx], "cell"), "is_right_cell", false)
			table.remove(is_right_cells, random_cell_idx)
			self.cells_is_right_count = self.cells_is_right_count - 1
		end
	end
end

function init(self)
	math.randomseed(os.time())
	self.is_first_state = true
	self.is_second_state = false
	_G.cell_state = cell_state
	self.cells = {}
	self.cells_is_right_count = 0
	self.count_is_right_cells = 0
	self.cells_is_fail_count = 0
	self.count_is_fail_cells = 0

	self.set_is_right_cell = function ()
		local random_number = math.random(2)
		if random_number == 1 then
			self.cells_is_right_count = self.cells_is_right_count + 1
			return true
		end
		return false
	end

	for i = 1, GAME_SETTINGS:get_settings(GAME_STATE.LEVEL).level_count_cells.x do
		for j = 1, GAME_SETTINGS:get_settings(GAME_STATE.LEVEL).level_count_cells.y do
			local spawn_pos = go.get_position() - 
				vmath.vector3(((GAME_SETTINGS:get_settings(GAME_STATE.LEVEL).level_count_cells.x + 1) / 2 * 150) + (i * 150 * -1), 
					((GAME_SETTINGS:get_settings(GAME_STATE.LEVEL).level_count_cells.y + 1) * 150 / 2 * -1) + (j * 150), 
					0)
			local cell = factory.create(factory_component,
				vmath.vector3(spawn_pos),
				nil,
				{
					state = _G.cell_state.EMPTY,
					is_right_cell = self.set_is_right_cell()
				})
			table.insert(self.cells, cell)
		end
	end

	validate_is_right_cells_count(self)

	self.cells_is_fail_count = math.floor(self.cells_is_right_count / 4)
	self.time = 0
	self.time_increase = 1

	self.on_level_pause_handler = function ()
		self.time_increase = 0
	end

	self.on_level_resume_handler = function ()
		self.time_increase = 1
	end

	self.on_change_level_handler = function ()
    end
	event_bus.EVENT_BUS:subscribe(GAME_STATE.EVENTS.on_level_pause, self.on_level_pause_handler)
	event_bus.EVENT_BUS:subscribe(GAME_STATE.EVENTS.on_level_resume, self.on_level_resume_handler)
	event_bus.EVENT_BUS:subscribe(GAME_STATE.EVENTS.on_change_level, self.on_change_level_handler)
end

function final(self)
	self.time = 0
	event_bus.EVENT_BUS:unsubscribe(GAME_STATE.EVENTS.on_level_pause, self.on_level_pause_handler)
	event_bus.EVENT_BUS:unsubscribe(GAME_STATE.EVENTS.on_level_resume, self.on_level_resume_handler)
	event_bus.EVENT_BUS:unsubscribe(GAME_STATE.EVENTS.on_change_level, self.on_change_level_handler)
	self.on_level_pause_handler = nil
	self.on_level_resume_handler = nil
	self.on_change_level_handler = nil
	self.set_is_right_cell = nil
	self.cells = {}
	self.cells_is_right_count = 0
	self.count_is_right_cells = 0
end

function update(self, dt)
	self.time = self.time + (dt * self.time_increase)
	if self.is_first_state then
		animations_queue.animation_queue:add_animation(coroutine.create(function ()
			msg.post("/gui", "update_timer", {value = math.floor(self.pre_prepare_state_time - self.time) + 1})
		end), 1)
	end

	if self.time >= self.pre_prepare_state_time and self.is_first_state then
		self.is_first_state = false
		self.is_second_state = true
		animations_queue.animation_queue:add_animation(coroutine.create(function ()
			msg.post("/gui", "hide_timer")
		end), 1)
		for _, cell in ipairs(self.cells) do
			animations_queue.animation_queue:add_animation(coroutine.create(function ()
				msg.post(cell, "show_is_right_cell")
			end), 1)
		end
	end

	if self.time >= self.pre_prepare_state_time + GAME_SETTINGS:get_settings(GAME_STATE.LEVEL).prepare_time and self.is_second_state then
		for _, cell in ipairs(self.cells) do
			animations_queue.animation_queue:add_animation(coroutine.create(function ()
				msg.post(cell, "hide_is_right_cell")
			end), 1)
			animations_queue.animation_queue:add_animation(coroutine.create(function ()
				msg.post(cell, "give_the_player_control")
			end), 2)
		end
		self.is_second_state = false
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("on_click_cell") then
		check_state(self, sender)
	end	
end